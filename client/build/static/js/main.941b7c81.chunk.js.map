{"version":3,"sources":["treeNode.jsx","manageNodes.jsx","App.js","serviceWorker.js","index.js"],"names":["StyledTreeNode","styled","div","_templateObject","props","isSelected","StyledTreeNodeLeft","_templateObject2","level","StyledTreeNodeRight","_templateObject3","NodeIcon","_templateObject4","marginRight","NodeIcon2","_templateObject5","NodeIconRed","_templateObject6","NodeIconGreen","_templateObject7","SelectedNodeOuter","_templateObject8","SelectedNodeInner","_templateObject9","retailer","color","getBackgroundColor","getColor","TreeNode","node","getChildNodes","onToggle","onHover","onSelectNode","onAddNode","removeLink","showRemoveButton","react_default","a","createElement","Fragment","onClick","onMouseOver","length","isOpen","index_esm","className","role","nodeName","linkedNodes","map","linkedNode","key","nodeId","nodePath","id","childNode","Object","assign","defaultProps","GetNodesAsObj","gql","manageNodes_templateObject","LinkNodes","manageNodes_templateObject2","RemoveLink","manageNodes_templateObject3","AddedNodeOuter","manageNodes_templateObject4","AddedNodeInner","manageNodes_templateObject5","ManageNodes","state","showFlipkartNodes","showAmazonNodes","toggleOnHover","fkNodes","amNodes","hdNodes","fkSelected","amSelected","hdSelected","linkNodesNode","linkNodesNodeList","getRootNodes","nodes","_this","values","filter","pathLength","node2","pathNameString","tempPath","tempName","setState","defineProperty","_this$setState2","tempNodesName","tempSelectedName","currentlySelected","tempNodePath","list","toBeAdded","x","tempNode","push","elId","console","log","el","document","getElementById","style","display","i","getElementsByClassName","switchRetailerView","this","_callee","result","tempKey","regenerator_default","wrap","_context","prev","next","variables","nodeToDelete","sent","data","amazonNodes","flipkartNodes","huddlieNodes","stop","linkNodes","_callee2","nodeList","y","_context2","setupNodesAsObj","_callee3","nodesObj","_context3","getNodesAsObj","JSON","parse","refreshTrees","_callee4","_context4","handleToggleOnHover","temp","removeAddedNode","newNodes","value","index","arr","_this2","hdRootNodes","fkRootNodes","amRootNodes","background","treeNode","Component","compose","graphql","name","App","manageNodes","Boolean","window","location","hostname","match","client","ApolloClient","uri","ReactDOM","render","react_apollo_esm","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.941b7c81.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  FaChevronDown,\r\n  FaChevronRight,\r\n  FaTimes,\r\n  FaLayerGroup,\r\n  FaPlusSquare,\r\n  FaRegDotCircle,\r\n  FaCircle\r\n} from \"react-icons/fa\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport { link } from \"fs\";\r\n\r\nconst getPaddingLeft = level => {\r\n  let paddingLeft = level * 20;\r\n  return paddingLeft;\r\n};\r\n\r\nconst getBackgroundColor = retailer => {\r\n  var color = \"#e0ffff\"; //light cyan\r\n  if (retailer === \"header\") {\r\n    color = \"#eee\";\r\n  } else if (retailer === \"hd\") {\r\n    color = \"#e0ffff\";\r\n  } else if (retailer === \"fk\") {\r\n    color = \"#F8E831\";\r\n  } else if (retailer === \"am\") {\r\n    color = \"#146EB4\";\r\n  }\r\n  return color;\r\n};\r\nconst getColor = retailer => {\r\n  var color = \"#000\"; //light cyan\r\n  if (retailer === \"fk\") {\r\n    color = \"#047BD5\";\r\n  } else if (retailer === \"am\") {\r\n    color = \"#FF9900\";\r\n  }\r\n  return color;\r\n};\r\n\r\nconst StyledTreeNode = styled.div`\r\n  cursor: pointer;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  padding: 5px 8px;\r\n  &:hover {\r\n    background: lightgray;\r\n  }\r\n  background: ${props => (props.isSelected ? \"#ddd\" : \"none\")};\r\n`;\r\n\r\nconst StyledTreeNodeLeft = styled.div`\r\n  padding-left: ${props => getPaddingLeft(props.level)}px;\r\n  width: 80%;\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\nconst StyledTreeNodeRight = styled.div`\r\n  width: 20%;\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\n\r\nconst NodeIcon = styled.div`\r\n  cursor: pointer;\r\n  padding: 0px 0px 0px 15px;\r\n  font-size: 15px;\r\n  margin-right: ${props => (props.marginRight ? props.marginRight : 5)}px;\r\n`;\r\nconst NodeIcon2 = styled.div`\r\n  cursor: pointer;\r\n  margin-left: 15px;\r\n  font-size: 15px;\r\n  padding: 0px 5px 2px 5px;\r\n  border: 1px solid #eee;\r\n  border-radius: 5px;\r\n  &:hover {\r\n    border: 1px solid #ddd;\r\n    background: white;\r\n  }\r\n`;\r\n\r\nconst NodeIconRed = styled.div`\r\n  margin-left: 10px;\r\n  color: red;\r\n`;\r\nconst NodeIconGreen = styled.div`\r\n  margin-left: 10px;\r\n  color: green;\r\n`;\r\n\r\nconst SelectedNodeOuter = styled.div`\r\n  background: ${props => (props.isSelected ? \"#eee\" : \"none\")};\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding 5px 75px;\r\n`;\r\n\r\nconst SelectedNodeInner = styled.div`\r\n  background: ${props => getBackgroundColor(props.retailer)};\r\n  color: ${props => getColor(props.retailer)};\r\n  font-family: Ozxgen, sans-serif;\r\n  margin: 0px 0px 5px 0px !important;\r\n  box-shadow: ${props =>\r\n    props.retailer === \"header\"\r\n      ? \"0px\"\r\n      : \"0px 0px 5px 0px rgba(15, 15, 15, 0.2)\"};\r\n  border-radius: ${props => (props.retailer === \"header\" ? \"0px\" : \"10px\")};\r\n  vertical-align: middle;\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\n\r\nconst TreeNode = props => {\r\n  const {\r\n    node,\r\n    getChildNodes,\r\n    level,\r\n    onToggle,\r\n    retailer,\r\n    onHover,\r\n    onSelectNode,\r\n    onAddNode,\r\n    removeLink,\r\n    showRemoveButton\r\n  } = props;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <StyledTreeNode level={level} isSelected={node.isSelected}>\r\n        <StyledTreeNodeLeft level={level}>\r\n          <NodeIcon\r\n            onClick={() => onToggle(retailer, node)}\r\n            onMouseOver={() => onHover(retailer, node)}\r\n          >\r\n            {getChildNodes(retailer, node).length > 0 &&\r\n              (node.isOpen ? <FaChevronDown /> : <FaChevronRight />)}\r\n          </NodeIcon>\r\n\r\n          {/* <span role=\"button\" onClick={() => onNodeSelect(node)}> */}\r\n          <span\r\n            className=\"tree-node-name-span\"\r\n            role=\"button\"\r\n            onClick={() => onToggle(retailer, node)}\r\n            onMouseOver={() => onHover(retailer, node)}\r\n          >\r\n            {node.nodeName}\r\n          </span>\r\n        </StyledTreeNodeLeft>\r\n        {/* <button className=\"tree-edit-btn\">Select</button> */}\r\n        <StyledTreeNodeRight>\r\n          <NodeIcon2 onClick={() => onSelectNode(retailer, node)}>\r\n            <FaLayerGroup />\r\n          </NodeIcon2>\r\n          <NodeIcon2 onClick={() => onAddNode(retailer, node)}>\r\n            <FaPlusSquare />\r\n          </NodeIcon2>\r\n          {node.linkedNodes.length > 0 ? (\r\n            <NodeIconGreen>\r\n              <FaCircle />\r\n            </NodeIconGreen>\r\n          ) : (\r\n            <NodeIconRed>\r\n              <FaRegDotCircle />\r\n            </NodeIconRed>\r\n          )}\r\n        </StyledTreeNodeRight>\r\n      </StyledTreeNode>\r\n      {node.isSelected && (\r\n        <SelectedNodeOuter isSelected={node.isSelected}>\r\n          <label>\r\n            <b>Currently Linked Nodes</b>\r\n          </label>\r\n          {node.linkedNodes.map(linkedNode => (\r\n            <React.Fragment key={linkedNode.nodeId}>\r\n              <SelectedNodeInner\r\n                retailer={linkedNode.retailer}\r\n                className={\r\n                  retailer === \"hd\"\r\n                    ? \"selected-node-inner-div-x\"\r\n                    : \"selected-node-inner-div\"\r\n                }\r\n              >\r\n                <label>{linkedNode.nodePath}</label>\r\n                {retailer === \"hd\" && (\r\n                  <FaTimes\r\n                    onClick={() =>\r\n                      showRemoveButton(linkedNode.nodeId + \"removebtn\")\r\n                    }\r\n                  />\r\n                )}\r\n              </SelectedNodeInner>\r\n              <button\r\n                id={linkedNode.nodeId + \"removebtn\"}\r\n                className=\"custom-btn linkedNodeRemoveBtn\"\r\n                onClick={() => removeLink(node, linkedNode)}\r\n              >\r\n                Remove Link\r\n              </button>\r\n            </React.Fragment>\r\n          ))}\r\n        </SelectedNodeOuter>\r\n      )}\r\n      {node.isOpen &&\r\n        getChildNodes(retailer, node).map(childNode => (\r\n          <TreeNode\r\n            {...props}\r\n            node={childNode}\r\n            level={level + 1}\r\n            key={childNode.nodeId}\r\n          />\r\n        ))}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nTreeNode.propTypes = {\r\n  node: PropTypes.object.isRequired,\r\n  getChildNodes: PropTypes.func.isRequired,\r\n  level: PropTypes.number.isRequired,\r\n  onToggle: PropTypes.func.isRequired\r\n};\r\n\r\nTreeNode.defaultProps = {\r\n  level: 0\r\n};\r\n\r\nexport default TreeNode;\r\n","import React, { Component } from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { compose, graphql } from \"react-apollo\";\r\nimport values from \"lodash/values\";\r\nimport TreeNode from \"./treeNode\";\r\nimport { FaToggleOn, FaToggleOff, FaTimes } from \"react-icons/fa\";\r\nimport styled from \"styled-components\";\r\n\r\nconst GetNodesAsObj = gql`\r\n  mutation getNodesAsObj($retailer: String!) {\r\n    getNodesAsObj(retailer: $retailer) {\r\n      nodes\r\n    }\r\n  }\r\n`;\r\nconst LinkNodes = gql`\r\n  mutation linkNodes($nodeId: String!, $nodeList: [linkedNodeInput]!) {\r\n    linkNodes(nodeId: $nodeId, nodeList: $nodeList) {\r\n      flipkartNodes {\r\n        nodeId\r\n        nodeName\r\n        pathString\r\n        pathNameString\r\n        pathLength\r\n        linkedNodes {\r\n          retailer\r\n          nodeId\r\n          nodePath\r\n        }\r\n      }\r\n      amazonNodes {\r\n        nodeId\r\n        nodeName\r\n        pathString\r\n        pathNameString\r\n        pathLength\r\n        linkedNodes {\r\n          retailer\r\n          nodeId\r\n          nodePath\r\n        }\r\n      }\r\n      huddlieNodes {\r\n        nodeId\r\n        nodeName\r\n        pathString\r\n        pathNameString\r\n        pathLength\r\n        linkedNodes {\r\n          retailer\r\n          nodeId\r\n          nodePath\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst RemoveLink = gql`\r\n  mutation removeLink($nodeId: String!, $nodeToDelete: linkedNodeInput!) {\r\n    removeLink(nodeId: $nodeId, nodeToDelete: $nodeToDelete) {\r\n      flipkartNodes {\r\n        nodeId\r\n        nodeName\r\n        pathString\r\n        pathNameString\r\n        pathLength\r\n        linkedNodes {\r\n          retailer\r\n          nodeId\r\n          nodePath\r\n        }\r\n      }\r\n      amazonNodes {\r\n        nodeId\r\n        nodeName\r\n        pathString\r\n        pathNameString\r\n        pathLength\r\n        linkedNodes {\r\n          retailer\r\n          nodeId\r\n          nodePath\r\n        }\r\n      }\r\n      huddlieNodes {\r\n        nodeId\r\n        nodeName\r\n        pathString\r\n        pathNameString\r\n        pathLength\r\n        linkedNodes {\r\n          retailer\r\n          nodeId\r\n          nodePath\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getBackgroundColor = retailer => {\r\n  var color = \"#e0ffff\"; //light cyan\r\n  if (retailer === \"header\") {\r\n    color = \"#eee\";\r\n  } else if (retailer === \"hd\") {\r\n    color = \"#e0ffff\";\r\n  } else if (retailer === \"fk\") {\r\n    color = \"#F8E831\";\r\n  } else if (retailer === \"am\") {\r\n    color = \"#146EB4\";\r\n  }\r\n  return color;\r\n};\r\n\r\nconst getColor = retailer => {\r\n  var color = \"#000\"; //light cyan\r\n  if (retailer === \"fk\") {\r\n    color = \"#047BD5\";\r\n  } else if (retailer === \"am\") {\r\n    color = \"#FF9900\";\r\n  }\r\n  return color;\r\n};\r\n\r\nconst AddedNodeOuter = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding 5px 75px;\r\n`;\r\n\r\nconst AddedNodeInner = styled.div`\r\n  background: ${props => getBackgroundColor(props.retailer)};\r\n  color: ${props => getColor(props.retailer)};\r\n  font-family: Ozxgen, sans-serif;\r\n  margin: 0px 0px 5px 0px !important;\r\n  box-shadow: ${props =>\r\n    props.retailer === \"header\"\r\n      ? \"0px\"\r\n      : \"0px 0px 5px 0px rgba(15, 15, 15, 0.2)\"};\r\n  border-radius: ${props => (props.retailer === \"header\" ? \"0px\" : \"10px\")};\r\n  vertical-align: middle;\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\n\r\nclass ManageNodes extends Component {\r\n  state = {\r\n    showFlipkartNodes: true,\r\n    showAmazonNodes: false,\r\n    toggleOnHover: false,\r\n    fkNodes: {},\r\n    amNodes: {},\r\n    hdNodes: {},\r\n    fkSelected: \"\",\r\n    amSelected: \"\",\r\n    hdSelected: \"\",\r\n    linkNodesNode: { nodeId: \"\", nodePath: \"\" },\r\n    linkNodesNodeList: []\r\n  };\r\n\r\n  getRootNodes = retailer => {\r\n    var nodes = {};\r\n    switch (retailer) {\r\n      case \"hd\":\r\n        nodes = this.state.hdNodes;\r\n        break;\r\n      case \"fk\":\r\n        nodes = this.state.fkNodes;\r\n        break;\r\n      case \"am\":\r\n        nodes = this.state.amNodes;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return values(nodes).filter(node => node.pathLength === 0);\r\n  };\r\n\r\n  getChildNodes = (retailer, node) => {\r\n    var nodes = {};\r\n    switch (retailer) {\r\n      case \"hd\":\r\n        nodes = this.state.hdNodes;\r\n        break;\r\n      case \"fk\":\r\n        nodes = this.state.fkNodes;\r\n        break;\r\n      case \"am\":\r\n        nodes = this.state.amNodes;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    var result = values(nodes).filter(\r\n      node2 => node2.pathNameString === node.tempPath\r\n    );\r\n    // console.log(result);\r\n    return result;\r\n  };\r\n\r\n  onHover = (retailer, node) => {\r\n    if (this.state.toggleOnHover && !node.isOpen) {\r\n      this.onToggle(retailer, node);\r\n    }\r\n  };\r\n\r\n  onToggle = (retailer, node) => {\r\n    const tempName = retailer + \"Nodes\";\r\n    var nodes = {};\r\n    switch (retailer) {\r\n      case \"hd\":\r\n        nodes = this.state.hdNodes;\r\n        break;\r\n      case \"fk\":\r\n        nodes = this.state.fkNodes;\r\n        break;\r\n      case \"am\":\r\n        nodes = this.state.amNodes;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    nodes[node.tempPath].isOpen = !node.isOpen;\r\n    this.setState({ [tempName]: nodes });\r\n  };\r\n\r\n  onSelectNode = (retailer, node) => {\r\n    const tempNodesName = retailer + \"Nodes\";\r\n    const tempSelectedName = retailer + \"Selected\";\r\n\r\n    var nodes = {};\r\n    var currentlySelected = \"\";\r\n    switch (retailer) {\r\n      case \"hd\":\r\n        nodes = this.state.hdNodes;\r\n        currentlySelected = this.state.hdSelected;\r\n        break;\r\n      case \"fk\":\r\n        nodes = this.state.fkNodes;\r\n        currentlySelected = this.state.fkSelected;\r\n        break;\r\n      case \"am\":\r\n        nodes = this.state.amNodes;\r\n        currentlySelected = this.state.amSelected;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (currentlySelected !== \"\" && currentlySelected !== node.tempPath) {\r\n      nodes[currentlySelected].isSelected = node.isSelected;\r\n    }\r\n\r\n    nodes[node.tempPath].isSelected = !node.isSelected;\r\n    this.setState({\r\n      [tempNodesName]: nodes,\r\n      [tempSelectedName]: node.tempPath\r\n    });\r\n  };\r\n\r\n  onAddNode = (retailer, node) => {\r\n    var tempNodePath = \"\";\r\n\r\n    if (retailer === \"hd\") {\r\n      if (node.pathLength > 0) {\r\n        tempNodePath = node.pathNameString + \">\" + node.nodeName;\r\n      } else {\r\n        tempNodePath = node.nodeName;\r\n      }\r\n\r\n      if (this.state.linkNodesNode.nodeId === \"\") {\r\n        this.setState({\r\n          linkNodesNode: { nodeId: node.nodeId, nodePath: tempNodePath }\r\n        });\r\n      } else if (this.state.linkNodesNode.nodeId !== node.nodeId) {\r\n        this.setState({\r\n          linkNodesNode: { nodeId: node.nodeId, nodePath: tempNodePath },\r\n          linkNodesNodeList: []\r\n        });\r\n      }\r\n    } else {\r\n      var list = this.state.linkNodesNodeList;\r\n      tempNodePath = \"\";\r\n\r\n      if (node.pathLength > 0) {\r\n        tempNodePath = node.pathNameString + \">\" + node.nodeName;\r\n      } else {\r\n        tempNodePath = node.nodeName;\r\n      }\r\n\r\n      var toBeAdded = true;\r\n      for (var x = 0; x < list.length; x++) {\r\n        var tempNode = list[x];\r\n        if (\r\n          tempNode.retailer === retailer &&\r\n          tempNode.nodeId === node.nodeId &&\r\n          tempNode.nodePath === tempNodePath\r\n        ) {\r\n          toBeAdded = false;\r\n        }\r\n      }\r\n\r\n      if (toBeAdded) {\r\n        list.push({\r\n          retailer: retailer,\r\n          nodeId: node.nodeId,\r\n          nodePath: tempNodePath\r\n        });\r\n      }\r\n\r\n      this.setState({\r\n        linkNodesNodeList: list\r\n      });\r\n    }\r\n  };\r\n\r\n  showRemoveButton = elId => {\r\n    console.log(elId);\r\n    var el = document.getElementById(elId);\r\n    if (el.style.display === \"\" || el.style.display === \"none\") {\r\n      var x = document.getElementsByClassName(\"linkedNodeRemoveBtn\");\r\n      var i;\r\n      for (i = 0; i < x.length; i++) {\r\n        x[i].style.display = \"none\";\r\n      }\r\n      el.style.display = \"block\";\r\n    } else {\r\n      el.style.display = \"none\";\r\n    }\r\n  };\r\n\r\n  switchRetailerView = () => {\r\n    this.setState(\r\n      {\r\n        showFlipkartNodes: !this.state.showFlipkartNodes,\r\n        showAmazonNodes: !this.state.showAmazonNodes\r\n      },\r\n      function() {\r\n        if (this.state.showFlipkartNodes) {\r\n          document.getElementById(\"flipkart-outer-div\").style.display = \"block\";\r\n        } else {\r\n          document.getElementById(\"flipkart-outer-div\").style.display = \"none\";\r\n        }\r\n        if (this.state.showAmazonNodes) {\r\n          document.getElementById(\"amazon-outer-div\").style.display = \"block\";\r\n        } else {\r\n          document.getElementById(\"amazon-outer-div\").style.display = \"none\";\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  removeLink = async (node, linkedNode) => {\r\n    console.log(node);\r\n    console.log(linkedNode);\r\n    var result = await this.props.RemoveLink({\r\n      variables: {\r\n        nodeId: node.nodeId,\r\n        nodeToDelete: {\r\n          nodeId: linkedNode.nodeId,\r\n          retailer: linkedNode.retailer,\r\n          nodePath: linkedNode.nodePath\r\n        }\r\n      }\r\n    });\r\n    console.log(result);\r\n\r\n    if (result && result.data && result.data.removeLink) {\r\n      var tempKey = \"\";\r\n      var node = {};\r\n      var nodes = {};\r\n      if (\r\n        result.data.removeLink.amazonNodes &&\r\n        result.data.removeLink.amazonNodes.length > 0\r\n      ) {\r\n        node = result.data.removeLink.amazonNodes[0];\r\n        if (node.pathLength > 0) {\r\n          tempKey = node.pathNameString + \">\" + node.nodeName;\r\n        } else {\r\n          tempKey = node.nodeName;\r\n        }\r\n        nodes = this.state.amNodes;\r\n        nodes[tempKey].linkedNodes = node.linkedNodes;\r\n        await this.setState({ amNodes: nodes });\r\n      }\r\n      if (\r\n        result.data.removeLink.flipkartNodes &&\r\n        result.data.removeLink.flipkartNodes.length > 0\r\n      ) {\r\n        node = result.data.removeLink.flipkartNodes[0];\r\n        if (node.pathLength > 0) {\r\n          tempKey = node.pathNameString + \">\" + node.nodeName;\r\n        } else {\r\n          tempKey = node.nodeName;\r\n        }\r\n        nodes = this.state.fkNodes;\r\n        nodes[tempKey].linkedNodes = node.linkedNodes;\r\n        await this.setState({ fkNodes: nodes });\r\n      }\r\n      if (\r\n        result.data.removeLink.huddlieNodes &&\r\n        result.data.removeLink.huddlieNodes.length > 0\r\n      ) {\r\n        node = result.data.removeLink.huddlieNodes[0];\r\n        if (node.pathLength > 0) {\r\n          tempKey = node.pathNameString + \">\" + node.nodeName;\r\n        } else {\r\n          tempKey = node.nodeName;\r\n        }\r\n        nodes = this.state.hdNodes;\r\n        nodes[tempKey].linkedNodes = node.linkedNodes;\r\n        await this.setState({ hdNodes: nodes });\r\n      }\r\n    }\r\n  };\r\n\r\n  linkNodes = async () => {\r\n    var nodeId = this.state.linkNodesNode.nodeId;\r\n    var nodeList = this.state.linkNodesNodeList;\r\n\r\n    var result = await this.props.LinkNodes({\r\n      variables: {\r\n        nodeId: nodeId,\r\n        nodeList: nodeList\r\n      }\r\n    });\r\n\r\n    console.log(result);\r\n    var fkNodes = [];\r\n    var amNodes = [];\r\n    if (result && result.data && result.data.linkNodes) {\r\n      var tempKey = \"\";\r\n      var node = {};\r\n      var nodes = {};\r\n      if (result.data.linkNodes.amazonNodes) {\r\n        amNodes = result.data.linkNodes.amazonNodes;\r\n        nodes = this.state.amNodes;\r\n        for (var x = 0; x < amNodes.length; x++) {\r\n          node = amNodes[x];\r\n          if (node.pathLength > 0) {\r\n            tempKey = node.pathNameString + \">\" + node.nodeName;\r\n          } else {\r\n            tempKey = node.nodeName;\r\n          }\r\n\r\n          nodes[tempKey].linkedNodes = node.linkedNodes;\r\n          await this.setState({ amNodes: nodes });\r\n        }\r\n      }\r\n\r\n      if (result.data.linkNodes.flipkartNodes) {\r\n        fkNodes = result.data.linkNodes.flipkartNodes;\r\n        nodes = this.state.fkNodes;\r\n        for (var y = 0; y < fkNodes.length; y++) {\r\n          node = fkNodes[y];\r\n          if (node.pathLength > 0) {\r\n            tempKey = node.pathNameString + \">\" + node.nodeName;\r\n          } else {\r\n            tempKey = node.nodeName;\r\n          }\r\n\r\n          nodes[tempKey].linkedNodes = node.linkedNodes;\r\n          await this.setState({ fkNodes: nodes });\r\n        }\r\n      }\r\n\r\n      if (result.data.linkNodes.huddlieNodes) {\r\n        node = result.data.linkNodes.huddlieNodes[0];\r\n        if (node.pathLength > 0) {\r\n          tempKey = node.pathNameString + \">\" + node.nodeName;\r\n        } else {\r\n          tempKey = node.nodeName;\r\n        }\r\n\r\n        nodes = this.state.hdNodes;\r\n\r\n        nodes[tempKey].linkedNodes = node.linkedNodes;\r\n        await this.setState({ hdNodes: nodes });\r\n\r\n        this.setState({\r\n          linkNodesNode: { nodeId: \"\", nodePath: \"\" },\r\n          linkNodesNodeList: []\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  setupNodesAsObj = async retailer => {\r\n    var nodesObj = await this.props.GetNodesAsObj({\r\n      variables: {\r\n        retailer: retailer\r\n      }\r\n    });\r\n    var nodes = {};\r\n    // console.log(nodesObj);\r\n    if (\r\n      nodesObj &&\r\n      nodesObj.data &&\r\n      nodesObj.data.getNodesAsObj &&\r\n      nodesObj.data.getNodesAsObj.nodes &&\r\n      nodesObj.data.getNodesAsObj.nodes !== \"\"\r\n    ) {\r\n      nodes = JSON.parse(nodesObj.data.getNodesAsObj.nodes);\r\n    }\r\n    var tempName = \"\";\r\n    if (retailer === \"hd\") {\r\n      tempName = \"hdNodes\";\r\n    }\r\n    if (retailer === \"am\") {\r\n      tempName = \"amNodes\";\r\n    }\r\n    if (retailer === \"fk\") {\r\n      tempName = \"fkNodes\";\r\n    }\r\n\r\n    this.setState({ [tempName]: nodes }, function() {\r\n      console.log(this.state);\r\n    });\r\n  };\r\n\r\n  refreshTrees = async () => {\r\n    await this.setupNodesAsObj(\"hd\");\r\n    await this.setupNodesAsObj(\"fk\");\r\n    await this.setupNodesAsObj(\"am\");\r\n  };\r\n\r\n  handleToggleOnHover = () => {\r\n    var temp = this.state.toggleOnHover;\r\n    this.setState({\r\n      toggleOnHover: !temp\r\n    });\r\n  };\r\n\r\n  removeAddedNode = (retailer, node) => {\r\n    if (retailer === \"hd\") {\r\n      this.setState({ linkNodesNode: { nodeId: \"\", nodePath: \"\" } });\r\n    } else {\r\n      var nodes = this.state.linkNodesNodeList;\r\n      var newNodes = nodes.filter(function(value, index, arr) {\r\n        return (\r\n          value.retailer !== retailer ||\r\n          value.nodeId !== node.nodeId ||\r\n          value.nodePath !== node.nodePath\r\n        );\r\n      });\r\n\r\n      this.setState({ linkNodesNodeList: newNodes });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const hdRootNodes = this.getRootNodes(\"hd\");\r\n    const fkRootNodes = this.getRootNodes(\"fk\");\r\n    const amRootNodes = this.getRootNodes(\"am\");\r\n\r\n    return (\r\n      <div className=\"custom-outer-div\">\r\n        <div className=\"custom-box-container\">\r\n          <div className=\"inner-container\">\r\n            <div className=\"custom-row\">\r\n              <div className=\"custom-row-left-30\" />\r\n              <div className=\"custom-row-center-40\">\r\n                <button className=\"custom-btn\" onClick={this.refreshTrees}>\r\n                  Refresh\r\n                </button>\r\n              </div>\r\n              <div className=\"custom-row-right-30\">\r\n                <div className=\"custom-toggle-div\">\r\n                  <label className=\"custom-toggle-label\">Toggle On Hover</label>\r\n                  {this.state.toggleOnHover ? (\r\n                    <FaToggleOn\r\n                      className=\"custom-toggle\"\r\n                      onClick={this.handleToggleOnHover}\r\n                    />\r\n                  ) : (\r\n                    <FaToggleOff\r\n                      className=\"custom-toggle\"\r\n                      onClick={this.handleToggleOnHover}\r\n                    />\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {(this.state.linkNodesNode.nodeId !== \"\" ||\r\n              this.state.linkNodesNodeList.length > 0) && (\r\n              <div className=\"custom-row\" style={{ background: \"#eee\" }}>\r\n                <div className=\"custom-row-left-43\">\r\n                  <AddedNodeOuter>\r\n                    {this.state.linkNodesNodeList.map(node => (\r\n                      <AddedNodeInner\r\n                        retailer={node.retailer}\r\n                        className=\"added-node-inner-div\"\r\n                        key={node.nodeId}\r\n                      >\r\n                        <label>{node.nodePath}</label>\r\n                        <FaTimes\r\n                          onClick={() =>\r\n                            this.removeAddedNode(node.retailer, node)\r\n                          }\r\n                        />\r\n                      </AddedNodeInner>\r\n                    ))}\r\n                  </AddedNodeOuter>\r\n                </div>\r\n                <div className=\"custom-row-center-14 custom-align-center\">\r\n                  <button\r\n                    className=\"custom-btn custom-btn2\"\r\n                    onClick={this.linkNodes}\r\n                  >\r\n                    Link Categories\r\n                  </button>\r\n                </div>\r\n                <div className=\"custom-row-right-43 custom-align-center\">\r\n                  {this.state.linkNodesNode.nodeId !== \"\" && (\r\n                    <AddedNodeOuter>\r\n                      <AddedNodeInner\r\n                        retailer={\"hd\"}\r\n                        className=\"added-node-inner-div\"\r\n                      >\r\n                        <label>{this.state.linkNodesNode.nodePath}</label>\r\n                        <FaTimes\r\n                          onClick={() =>\r\n                            this.removeAddedNode(\"hd\", this.state.linkNodesNode)\r\n                          }\r\n                        />\r\n                      </AddedNodeInner>\r\n                    </AddedNodeOuter>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            <div className=\"mc-row\">\r\n              <div id=\"retailer-outer-div\" className=\"mc-row-50\">\r\n                <div className=\"custom-box-controller\">\r\n                  <div\r\n                    className={\r\n                      this.state.showFlipkartNodes\r\n                        ? \"controller selected-controller\"\r\n                        : \"controller\"\r\n                    }\r\n                    onClick={this.switchRetailerView}\r\n                  >\r\n                    Flipkart\r\n                  </div>\r\n                  <div\r\n                    className={\r\n                      this.state.showAmazonNodes\r\n                        ? \"controller selected-controller\"\r\n                        : \"controller\"\r\n                    }\r\n                    onClick={this.switchRetailerView}\r\n                  >\r\n                    Amazon\r\n                  </div>\r\n                </div>\r\n                <div id=\"flipkart-outer-div\">\r\n                  {fkRootNodes.map(node => (\r\n                    <TreeNode\r\n                      node={node}\r\n                      getChildNodes={this.getChildNodes}\r\n                      onToggle={this.onToggle}\r\n                      retailer=\"fk\"\r\n                      key={node.nodeId}\r\n                      onHover={this.onHover}\r\n                      onSelectNode={this.onSelectNode}\r\n                      onAddNode={this.onAddNode}\r\n                      removeLink={this.removeLink}\r\n                      showRemoveButton={this.showRemoveButton}\r\n                    />\r\n                  ))}\r\n                </div>\r\n                <div id=\"amazon-outer-div\">\r\n                  {amRootNodes.map(node => (\r\n                    <TreeNode\r\n                      node={node}\r\n                      getChildNodes={this.getChildNodes}\r\n                      onToggle={this.onToggle}\r\n                      retailer=\"am\"\r\n                      key={node.nodeId}\r\n                      onHover={this.onHover}\r\n                      onSelectNode={this.onSelectNode}\r\n                      onAddNode={this.onAddNode}\r\n                      removeLink={this.removeLink}\r\n                      showRemoveButton={this.showRemoveButton}\r\n                    />\r\n                  ))}\r\n                </div>\r\n              </div>\r\n              <div id=\"huddlie-outer-div\" className=\"mc-row-50\">\r\n                <div className=\"header\">Huddlie</div>\r\n                {hdRootNodes.map(node => (\r\n                  <TreeNode\r\n                    node={node}\r\n                    getChildNodes={this.getChildNodes}\r\n                    onToggle={this.onToggle}\r\n                    retailer=\"hd\"\r\n                    key={node.nodeId}\r\n                    onHover={this.onHover}\r\n                    onSelectNode={this.onSelectNode}\r\n                    onAddNode={this.onAddNode}\r\n                    removeLink={this.removeLink}\r\n                    showRemoveButton={this.showRemoveButton}\r\n                  />\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  graphql(GetNodesAsObj, { name: \"GetNodesAsObj\" }),\r\n  graphql(LinkNodes, { name: \"LinkNodes\" }),\r\n  graphql(RemoveLink, { name: \"RemoveLink\" })\r\n)(ManageNodes);\r\n","import React, { Component } from \"react\";\nimport ManageNodes from \"./manageNodes.jsx\";\n\nclass App extends Component {\n  state = {};\n\n  render() {\n    return (\n      <div className=\"custom-root-container\">\n        <ManageNodes />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./customStyles.scss\";\n\nconst client = new ApolloClient({\n  uri: \"/graphql\"\n  // uri: \"http://localhost:4000/graphql\"\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}