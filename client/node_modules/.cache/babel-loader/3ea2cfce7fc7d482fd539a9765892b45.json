{"ast":null,"code":"import _taggedTemplateLiteral from \"C:\\\\Apps\\\\Categories\\\\huddlie_nodes\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Apps\\\\Categories\\\\huddlie_nodes\\\\client\\\\src\\\\treeNode.jsx\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  cursor: pointer;\\n  padding: 0px 0px 0px 15px;\\n  font-size: 15px;\\n  margin-right: \", \"px;\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  cursor: pointer;\\n  display: flex;\\n  flex-direction: row;\\n  align-items: center;\\n  padding: 5px 8px;\\n  padding-left: \", \"px;\\n  &:hover {\\n    background: lightgray;\\n  }\\n  background: \", \";\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { FaChevronDown, FaChevronRight, FaEdit } from \"react-icons/fa\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\n\nconst getPaddingLeft = level => {\n  let paddingLeft = level * 20;\n  return paddingLeft;\n};\n\nconst StyledTreeNode = styled.div(_templateObject(), props => getPaddingLeft(props.level), props => props.isSelected ? getColor(props.retailer) : \"none\");\nconst NodeIcon = styled.div(_templateObject2(), props => props.marginRight ? props.marginRight : 5);\n\nconst TreeNode = props => {\n  const node = props.node,\n        getChildNodes = props.getChildNodes,\n        level = props.level,\n        onToggle = props.onToggle,\n        retailer = props.retailer,\n        onHover = props.onHover,\n        onSelectNode = props.onSelectNode;\n\n  const getColor = retailer => {\n    const color = \"#e0ffff\";\n    return color;\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(StyledTreeNode, {\n    level: level,\n    isSelected: node.isSelected,\n    retailer: node.retailer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(NodeIcon, {\n    onClick: () => onToggle(retailer, node),\n    onMouseOver: () => onHover(retailer, node),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, getChildNodes(retailer, node).length > 0 && (node.isOpen ? React.createElement(FaChevronDown, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }) : React.createElement(FaChevronRight, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }))), React.createElement(\"span\", {\n    className: \"tree-node-name-span\",\n    role: \"button\",\n    onClick: () => onToggle(retailer, node),\n    onMouseOver: () => onHover(retailer, node),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, node.nodeName), React.createElement(NodeIcon, {\n    onClick: () => onSelectNode(retailer, node),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(FaEdit, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }))), node.isSelected && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Selected\"), node.isOpen && getChildNodes(retailer, node).map(childNode => React.createElement(TreeNode, Object.assign({}, props, {\n    node: childNode,\n    level: level + 1,\n    key: childNode.nodeId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }))));\n};\n\nTreeNode.propTypes = {\n  node: PropTypes.object.isRequired,\n  getChildNodes: PropTypes.func.isRequired,\n  level: PropTypes.number.isRequired,\n  onToggle: PropTypes.func.isRequired\n};\nTreeNode.defaultProps = {\n  level: 0\n};\nexport default TreeNode;","map":{"version":3,"sources":["C:\\Apps\\Categories\\huddlie_nodes\\client\\src\\treeNode.jsx"],"names":["React","FaChevronDown","FaChevronRight","FaEdit","styled","PropTypes","getPaddingLeft","level","paddingLeft","StyledTreeNode","div","props","isSelected","getColor","retailer","NodeIcon","marginRight","TreeNode","node","getChildNodes","onToggle","onHover","onSelectNode","color","length","isOpen","nodeName","map","childNode","nodeId","propTypes","object","isRequired","func","number","defaultProps"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { FaChevronDown, FaChevronRight, FaEdit } from \"react-icons/fa\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst getPaddingLeft = level => {\r\n  let paddingLeft = level * 20;\r\n  return paddingLeft;\r\n};\r\n\r\nconst StyledTreeNode = styled.div`\r\n  cursor: pointer;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  padding: 5px 8px;\r\n  padding-left: ${props => getPaddingLeft(props.level)}px;\r\n  &:hover {\r\n    background: lightgray;\r\n  }\r\n  background: ${props =>\r\n    props.isSelected ? getColor(props.retailer) : \"none\"};\r\n`;\r\n\r\nconst NodeIcon = styled.div`\r\n  cursor: pointer;\r\n  padding: 0px 0px 0px 15px;\r\n  font-size: 15px;\r\n  margin-right: ${props => (props.marginRight ? props.marginRight : 5)}px;\r\n`;\r\n\r\nconst TreeNode = props => {\r\n  const {\r\n    node,\r\n    getChildNodes,\r\n    level,\r\n    onToggle,\r\n    retailer,\r\n    onHover,\r\n    onSelectNode\r\n  } = props;\r\n\r\n  const getColor = retailer => {\r\n    const color = \"#e0ffff\";\r\n    return color;\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <StyledTreeNode\r\n        level={level}\r\n        isSelected={node.isSelected}\r\n        retailer={node.retailer}\r\n      >\r\n        <NodeIcon\r\n          onClick={() => onToggle(retailer, node)}\r\n          onMouseOver={() => onHover(retailer, node)}\r\n        >\r\n          {getChildNodes(retailer, node).length > 0 &&\r\n            (node.isOpen ? <FaChevronDown /> : <FaChevronRight />)}\r\n        </NodeIcon>\r\n\r\n        {/* <span role=\"button\" onClick={() => onNodeSelect(node)}> */}\r\n        <span\r\n          className=\"tree-node-name-span\"\r\n          role=\"button\"\r\n          onClick={() => onToggle(retailer, node)}\r\n          onMouseOver={() => onHover(retailer, node)}\r\n        >\r\n          {node.nodeName}\r\n        </span>\r\n        {/* <button className=\"tree-edit-btn\">Select</button> */}\r\n        <NodeIcon onClick={() => onSelectNode(retailer, node)}>\r\n          <FaEdit />\r\n        </NodeIcon>\r\n      </StyledTreeNode>\r\n      {node.isSelected && <div>Selected</div>}\r\n      {node.isOpen &&\r\n        getChildNodes(retailer, node).map(childNode => (\r\n          <TreeNode\r\n            {...props}\r\n            node={childNode}\r\n            level={level + 1}\r\n            key={childNode.nodeId}\r\n          />\r\n        ))}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nTreeNode.propTypes = {\r\n  node: PropTypes.object.isRequired,\r\n  getChildNodes: PropTypes.func.isRequired,\r\n  level: PropTypes.number.isRequired,\r\n  onToggle: PropTypes.func.isRequired\r\n};\r\n\r\nTreeNode.defaultProps = {\r\n  level: 0\r\n};\r\n\r\nexport default TreeNode;\r\n"]},"metadata":{},"sourceType":"module"}