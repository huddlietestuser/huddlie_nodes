{"ast":null,"code":"import _taggedTemplateLiteral from \"C:\\\\Apps\\\\Categories\\\\huddlie_nodes\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Apps\\\\Categories\\\\huddlie_nodes\\\\client\\\\src\\\\treeNode.jsx\";\n\nfunction _templateObject6() {\n  const data = _taggedTemplateLiteral([\"\\n  background: \", \";\\n  color: \", \";\\n  font-family: Ozxgen, sans-serif;\\n  margin: 0px 0px 5px 0px !important;\\n  box-shadow: \", \";\\n  border-radius: \", \";\\n\"]);\n\n  _templateObject6 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  const data = _taggedTemplateLiteral([\"\\n  background: \", \";\\n  display: flex;\\n  flex-direction: column;\\n  padding 5px 75px;\\n\"]);\n\n  _templateObject5 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  const data = _taggedTemplateLiteral([\"\\n  cursor: pointer;\\n  margin-left: 15px;\\n  font-size: 15px;\\n  padding: 0px 5px 2px 5px;\\n  border: 1px solid #eee;\\n  border-radius: 5px;\\n  &:hover {\\n    border: 1px solid #ddd;\\n    background: white;\\n  }\\n\"]);\n\n  _templateObject4 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"\\n  cursor: pointer;\\n  padding: 0px 0px 0px 15px;\\n  font-size: 15px;\\n  margin-right: \", \"px;\\n\"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  padding-left: \", \"px;\\n  width: 80%;\\n  display: flex;\\n  flex-direction: row;\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  cursor: pointer;\\n  display: flex;\\n  flex-direction: row;\\n  align-items: center;\\n  padding: 5px 8px;\\n  &:hover {\\n    background: lightgray;\\n  }\\n  background: \", \";\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { FaChevronDown, FaChevronRight, FaEdit, FaLayerGroup } from \"react-icons/fa\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\n\nconst getPaddingLeft = level => {\n  let paddingLeft = level * 20;\n  return paddingLeft;\n};\n\nconst getBackgroundColor = retailer => {\n  var color = \"#e0ffff\"; //light cyan\n\n  if (retailer === \"header\") {\n    color = \"#eee\";\n  } else if (retailer === \"hd\") {\n    color = \"#fff\";\n  } else if (retailer === \"fk\") {\n    color = \"#F8E831\";\n  } else if (retailer === \"am\") {\n    color = \"#146EB4\";\n  }\n\n  return color;\n};\n\nconst getColor = retailer => {\n  var color = \"#000\"; //light cyan\n\n  if (retailer === \"fk\") {\n    color = \"#047BD5\";\n  } else if (retailer === \"am\") {\n    color = \"#FF9900\";\n  }\n\n  return color;\n};\n\nconst StyledTreeNode = styled.div(_templateObject(), props => props.isSelected ? \"#ddd\" : \"none\");\nconst StyledTreeNodeLeft = styled.div(_templateObject2(), props => getPaddingLeft(props.level));\nconst NodeIcon = styled.div(_templateObject3(), props => props.marginRight ? props.marginRight : 5);\nconst NodeIcon2 = styled.div(_templateObject4());\nconst SelectedNodeOuter = styled.div(_templateObject5(), props => props.isSelected ? \"#eee\" : \"none\");\nconst SelectedNodeInner = styled.label(_templateObject6(), props => getBackgroundColor(props.retailer), props => getColor(props.retailer), props => props.retailer === \"header\" ? \"0px\" : \"0px 0px 5px 0px rgba(15, 15, 15, 0.2)\", props => props.retailer === \"header\" ? \"0px\" : \"10px\");\n\nconst TreeNode = props => {\n  const node = props.node,\n        getChildNodes = props.getChildNodes,\n        level = props.level,\n        onToggle = props.onToggle,\n        retailer = props.retailer,\n        onHover = props.onHover,\n        onSelectNode = props.onSelectNode;\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(StyledTreeNode, {\n    level: level,\n    isSelected: node.isSelected,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(StyledTreeNodeLeft, {\n    level: level,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(NodeIcon, {\n    onClick: () => onToggle(retailer, node),\n    onMouseOver: () => onHover(retailer, node),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, getChildNodes(retailer, node).length > 0 && (node.isOpen ? React.createElement(FaChevronDown, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }) : React.createElement(FaChevronRight, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }))), React.createElement(\"span\", {\n    className: \"tree-node-name-span\",\n    role: \"button\",\n    onClick: () => onToggle(retailer, node),\n    onMouseOver: () => onHover(retailer, node),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, node.nodeName)), React.createElement(\"div\", {\n    className: \"custom-row-40\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(NodeIcon2, {\n    onClick: () => onSelectNode(retailer, node),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(FaLayerGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  })))), node.isSelected && React.createElement(SelectedNodeOuter, {\n    isSelected: node.isSelected,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, \"Currently Linked Nodes\")), node.linkedNodes.map(linkedNode => React.createElement(SelectedNodeInner, {\n    retailer: linkedNode.retailer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, linkedNode.nodePath))), node.isOpen && getChildNodes(retailer, node).map(childNode => React.createElement(TreeNode, Object.assign({}, props, {\n    node: childNode,\n    level: level + 1,\n    key: childNode.nodeId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }))));\n};\n\nTreeNode.propTypes = {\n  node: PropTypes.object.isRequired,\n  getChildNodes: PropTypes.func.isRequired,\n  level: PropTypes.number.isRequired,\n  onToggle: PropTypes.func.isRequired\n};\nTreeNode.defaultProps = {\n  level: 0\n};\nexport default TreeNode;","map":{"version":3,"sources":["C:\\Apps\\Categories\\huddlie_nodes\\client\\src\\treeNode.jsx"],"names":["React","FaChevronDown","FaChevronRight","FaEdit","FaLayerGroup","styled","PropTypes","getPaddingLeft","level","paddingLeft","getBackgroundColor","retailer","color","getColor","StyledTreeNode","div","props","isSelected","StyledTreeNodeLeft","NodeIcon","marginRight","NodeIcon2","SelectedNodeOuter","SelectedNodeInner","label","TreeNode","node","getChildNodes","onToggle","onHover","onSelectNode","length","isOpen","nodeName","linkedNodes","map","linkedNode","nodePath","childNode","nodeId","propTypes","object","isRequired","func","number","defaultProps"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n  FaChevronDown,\r\n  FaChevronRight,\r\n  FaEdit,\r\n  FaLayerGroup\r\n} from \"react-icons/fa\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst getPaddingLeft = level => {\r\n  let paddingLeft = level * 20;\r\n  return paddingLeft;\r\n};\r\n\r\nconst getBackgroundColor = retailer => {\r\n  var color = \"#e0ffff\"; //light cyan\r\n  if (retailer === \"header\") {\r\n    color = \"#eee\";\r\n  } else if (retailer === \"hd\") {\r\n    color = \"#fff\";\r\n  } else if (retailer === \"fk\") {\r\n    color = \"#F8E831\";\r\n  } else if (retailer === \"am\") {\r\n    color = \"#146EB4\";\r\n  }\r\n  return color;\r\n};\r\nconst getColor = retailer => {\r\n  var color = \"#000\"; //light cyan\r\n  if (retailer === \"fk\") {\r\n    color = \"#047BD5\";\r\n  } else if (retailer === \"am\") {\r\n    color = \"#FF9900\";\r\n  }\r\n  return color;\r\n};\r\n\r\nconst StyledTreeNode = styled.div`\r\n  cursor: pointer;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  padding: 5px 8px;\r\n  &:hover {\r\n    background: lightgray;\r\n  }\r\n  background: ${props => (props.isSelected ? \"#ddd\" : \"none\")};\r\n`;\r\n\r\nconst StyledTreeNodeLeft = styled.div`\r\n  padding-left: ${props => getPaddingLeft(props.level)}px;\r\n  width: 80%;\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\n\r\nconst NodeIcon = styled.div`\r\n  cursor: pointer;\r\n  padding: 0px 0px 0px 15px;\r\n  font-size: 15px;\r\n  margin-right: ${props => (props.marginRight ? props.marginRight : 5)}px;\r\n`;\r\nconst NodeIcon2 = styled.div`\r\n  cursor: pointer;\r\n  margin-left: 15px;\r\n  font-size: 15px;\r\n  padding: 0px 5px 2px 5px;\r\n  border: 1px solid #eee;\r\n  border-radius: 5px;\r\n  &:hover {\r\n    border: 1px solid #ddd;\r\n    background: white;\r\n  }\r\n`;\r\n\r\nconst SelectedNodeOuter = styled.div`\r\n  background: ${props => (props.isSelected ? \"#eee\" : \"none\")};\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding 5px 75px;\r\n`;\r\n\r\nconst SelectedNodeInner = styled.label`\r\n  background: ${props => getBackgroundColor(props.retailer)};\r\n  color: ${props => getColor(props.retailer)};\r\n  font-family: Ozxgen, sans-serif;\r\n  margin: 0px 0px 5px 0px !important;\r\n  box-shadow: ${props =>\r\n    props.retailer === \"header\"\r\n      ? \"0px\"\r\n      : \"0px 0px 5px 0px rgba(15, 15, 15, 0.2)\"};\r\n  border-radius: ${props => (props.retailer === \"header\" ? \"0px\" : \"10px\")};\r\n`;\r\n\r\nconst TreeNode = props => {\r\n  const {\r\n    node,\r\n    getChildNodes,\r\n    level,\r\n    onToggle,\r\n    retailer,\r\n    onHover,\r\n    onSelectNode\r\n  } = props;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <StyledTreeNode level={level} isSelected={node.isSelected}>\r\n        <StyledTreeNodeLeft level={level}>\r\n          <NodeIcon\r\n            onClick={() => onToggle(retailer, node)}\r\n            onMouseOver={() => onHover(retailer, node)}\r\n          >\r\n            {getChildNodes(retailer, node).length > 0 &&\r\n              (node.isOpen ? <FaChevronDown /> : <FaChevronRight />)}\r\n          </NodeIcon>\r\n\r\n          {/* <span role=\"button\" onClick={() => onNodeSelect(node)}> */}\r\n          <span\r\n            className=\"tree-node-name-span\"\r\n            role=\"button\"\r\n            onClick={() => onToggle(retailer, node)}\r\n            onMouseOver={() => onHover(retailer, node)}\r\n          >\r\n            {node.nodeName}\r\n          </span>\r\n        </StyledTreeNodeLeft>\r\n        {/* <button className=\"tree-edit-btn\">Select</button> */}\r\n        <div className=\"custom-row-40\">\r\n          <NodeIcon2 onClick={() => onSelectNode(retailer, node)}>\r\n            <FaLayerGroup />\r\n          </NodeIcon2>\r\n        </div>\r\n      </StyledTreeNode>\r\n      {node.isSelected && (\r\n        <SelectedNodeOuter isSelected={node.isSelected}>\r\n          <label>\r\n            <b>Currently Linked Nodes</b>\r\n          </label>\r\n          {node.linkedNodes.map(linkedNode => (\r\n            <SelectedNodeInner retailer={linkedNode.retailer}>\r\n              {linkedNode.nodePath}\r\n            </SelectedNodeInner>\r\n          ))}\r\n        </SelectedNodeOuter>\r\n      )}\r\n      {node.isOpen &&\r\n        getChildNodes(retailer, node).map(childNode => (\r\n          <TreeNode\r\n            {...props}\r\n            node={childNode}\r\n            level={level + 1}\r\n            key={childNode.nodeId}\r\n          />\r\n        ))}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nTreeNode.propTypes = {\r\n  node: PropTypes.object.isRequired,\r\n  getChildNodes: PropTypes.func.isRequired,\r\n  level: PropTypes.number.isRequired,\r\n  onToggle: PropTypes.func.isRequired\r\n};\r\n\r\nTreeNode.defaultProps = {\r\n  level: 0\r\n};\r\n\r\nexport default TreeNode;\r\n"]},"metadata":{},"sourceType":"module"}