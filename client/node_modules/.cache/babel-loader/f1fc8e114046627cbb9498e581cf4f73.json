{"ast":null,"code":"import _taggedTemplateLiteral from \"C:\\\\Apps\\\\Categories\\\\huddlie_nodes\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Apps\\\\Categories\\\\huddlie_nodes\\\\client\\\\src\\\\manageNodes.jsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  mutation getNodesAsObj($retailer: String!) {\\n    getNodesAsObj(retailer: $retailer) {\\n      nodes\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from \"react\";\nimport gql from \"graphql-tag\";\nimport { compose, graphql } from \"react-apollo\";\nimport values from \"lodash/values\"; // import TreeNode from \"./treeNode\";\n\nconst GetNodesAsObj = gql(_templateObject());\n\nclass ManageNodes extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      showFlipkartNodes: true,\n      showAmazonNodes: false,\n      fkNodes: {},\n      amNodes: {},\n      hdNodes: {},\n      nodes: {}\n    };\n\n    this.getRootNodes = () => {\n      const nodes = this.state.nodes;\n      return values(nodes).filter(node => node.pathLength === 0);\n    };\n\n    this.getChildNodes = node => {\n      const nodes = this.state.nodes;\n      return values(nodes).filter(node2 => node2.pathNameString === node.tempPath);\n    };\n\n    this.onToggle = node => {\n      const nodes = this.state.nodes;\n      nodes[node.tempPath].isOpen = !node.isOpen;\n      this.setState({\n        nodes\n      });\n    };\n\n    this.switchRetailerView = () => {\n      this.setState({\n        showFlipkartNodes: !this.state.showFlipkartNodes,\n        showAmazonNodes: !this.state.showAmazonNodes\n      }, function () {\n        if (this.state.showFlipkartNodes) {\n          document.getElementById(\"flipkart-outer-div\").style.display = \"block\";\n        } else {\n          document.getElementById(\"flipkart-outer-div\").style.display = \"none\";\n        }\n\n        if (this.state.showAmazonNodes) {\n          document.getElementById(\"amazon-outer-div\").style.display = \"block\";\n        } else {\n          document.getElementById(\"amazon-outer-div\").style.display = \"none\";\n        }\n      });\n    };\n\n    this.setupNodesAsObj = async retailer => {\n      var nodesObj = await this.props.GetNodesAsObj({\n        variables: {\n          retailer: retailer\n        }\n      });\n      var nodes = {}; // console.log(nodesObj);\n\n      if (nodesObj && nodesObj.data && nodesObj.data.getNodesAsObj && nodesObj.data.getNodesAsObj.nodes && nodesObj.data.getNodesAsObj.nodes !== \"\") {\n        nodes = JSON.parse(nodesObj.data.getNodesAsObj.nodes);\n      }\n\n      var tempName = \"\";\n\n      if (retailer === \"hd\") {\n        tempName = \"hdNodes\";\n      }\n\n      if (retailer === \"am\") {\n        tempName = \"amNodes\";\n      }\n\n      if (retailer === \"fk\") {\n        tempName = \"fkNodes\";\n      }\n\n      this.setState({\n        [tempName]: nodes\n      }, function () {\n        console.log(this.state);\n      });\n    };\n\n    this.refreshTrees = () => {\n      this.setupNodesAsObj(\"hd\");\n      this.setupNodesAsObj(\"fk\");\n      this.setupNodesAsObj(\"am\");\n    };\n  }\n\n  render() {\n    console.log(this.props);\n    return React.createElement(\"div\", {\n      className: \"custom-outer-div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"custom-box-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"inner-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header-no-border\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"label-with-underline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Manage Categories\")), React.createElement(\"button\", {\n      className: \"login-button\",\n      onClick: this.refreshTrees,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Refresh\"), React.createElement(\"div\", {\n      className: \"mc-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"retailer-outer-div\",\n      className: \"mc-row-50\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header-no-border\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Retailer Categories\"), React.createElement(\"div\", {\n      className: \"custom-box-controller\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: this.state.showFlipkartNodes ? \"controller selected-controller\" : \"controller\",\n      onClick: this.switchRetailerView,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Flipkart\"), React.createElement(\"div\", {\n      className: this.state.showAmazonNodes ? \"controller selected-controller\" : \"controller\",\n      onClick: this.switchRetailerView,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Amazon\")), React.createElement(\"div\", {\n      id: \"flipkart-outer-div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Flipkart Nodes\"), React.createElement(\"div\", {\n      id: \"amazon-outer-div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Amazon Nodes\")), React.createElement(\"div\", {\n      id: \"huddlie-outer-div\",\n      className: \"mc-row-50\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header-no-border\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Huddlie Categories\"), this.state.nodes !== {} && this.getRootNodes().map(node => React.createElement(\"div\", {\n      key: node.nodeId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, node.nodeName), React.createElement(\"button\", {\n      onClick: () => this.getChildNodes(node),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"get children\"))))))));\n  }\n\n}\n\nexport default graphql(GetNodesAsObj, {\n  name: \"GetNodesAsObj\"\n})(ManageNodes);","map":{"version":3,"sources":["C:\\Apps\\Categories\\huddlie_nodes\\client\\src\\manageNodes.jsx"],"names":["React","Component","gql","compose","graphql","values","GetNodesAsObj","ManageNodes","state","showFlipkartNodes","showAmazonNodes","fkNodes","amNodes","hdNodes","nodes","getRootNodes","filter","node","pathLength","getChildNodes","node2","pathNameString","tempPath","onToggle","isOpen","setState","switchRetailerView","document","getElementById","style","display","setupNodesAsObj","retailer","nodesObj","props","variables","data","getNodesAsObj","JSON","parse","tempName","console","log","refreshTrees","render","map","nodeId","nodeName","name"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { compose, graphql } from \"react-apollo\";\r\nimport values from \"lodash/values\";\r\n// import TreeNode from \"./treeNode\";\r\n\r\nconst GetNodesAsObj = gql`\r\n  mutation getNodesAsObj($retailer: String!) {\r\n    getNodesAsObj(retailer: $retailer) {\r\n      nodes\r\n    }\r\n  }\r\n`;\r\n\r\nclass ManageNodes extends Component {\r\n  state = {\r\n    showFlipkartNodes: true,\r\n    showAmazonNodes: false,\r\n    fkNodes: {},\r\n    amNodes: {},\r\n    hdNodes: {},\r\n    nodes: {}\r\n  };\r\n\r\n  getRootNodes = () => {\r\n    const { nodes } = this.state;\r\n    return values(nodes).filter(node => node.pathLength === 0);\r\n  };\r\n\r\n  getChildNodes = node => {\r\n    const { nodes } = this.state;\r\n    return values(nodes).filter(\r\n      node2 => node2.pathNameString === node.tempPath\r\n    );\r\n  };\r\n\r\n  onToggle = node => {\r\n    const { nodes } = this.state;\r\n    nodes[node.tempPath].isOpen = !node.isOpen;\r\n    this.setState({ nodes });\r\n  };\r\n\r\n  switchRetailerView = () => {\r\n    this.setState(\r\n      {\r\n        showFlipkartNodes: !this.state.showFlipkartNodes,\r\n        showAmazonNodes: !this.state.showAmazonNodes\r\n      },\r\n      function() {\r\n        if (this.state.showFlipkartNodes) {\r\n          document.getElementById(\"flipkart-outer-div\").style.display = \"block\";\r\n        } else {\r\n          document.getElementById(\"flipkart-outer-div\").style.display = \"none\";\r\n        }\r\n        if (this.state.showAmazonNodes) {\r\n          document.getElementById(\"amazon-outer-div\").style.display = \"block\";\r\n        } else {\r\n          document.getElementById(\"amazon-outer-div\").style.display = \"none\";\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  setupNodesAsObj = async retailer => {\r\n    var nodesObj = await this.props.GetNodesAsObj({\r\n      variables: {\r\n        retailer: retailer\r\n      }\r\n    });\r\n    var nodes = {};\r\n    // console.log(nodesObj);\r\n    if (\r\n      nodesObj &&\r\n      nodesObj.data &&\r\n      nodesObj.data.getNodesAsObj &&\r\n      nodesObj.data.getNodesAsObj.nodes &&\r\n      nodesObj.data.getNodesAsObj.nodes !== \"\"\r\n    ) {\r\n      nodes = JSON.parse(nodesObj.data.getNodesAsObj.nodes);\r\n    }\r\n    var tempName = \"\";\r\n    if (retailer === \"hd\") {\r\n      tempName = \"hdNodes\";\r\n    }\r\n    if (retailer === \"am\") {\r\n      tempName = \"amNodes\";\r\n    }\r\n    if (retailer === \"fk\") {\r\n      tempName = \"fkNodes\";\r\n    }\r\n\r\n    this.setState({ [tempName]: nodes }, function() {\r\n      console.log(this.state);\r\n    });\r\n  };\r\n\r\n  refreshTrees = () => {\r\n    this.setupNodesAsObj(\"hd\");\r\n    this.setupNodesAsObj(\"fk\");\r\n    this.setupNodesAsObj(\"am\");\r\n  };\r\n\r\n  render() {\r\n    console.log(this.props);\r\n\r\n    return (\r\n      <div className=\"custom-outer-div\">\r\n        <div className=\"custom-box-container\">\r\n          <div className=\"inner-container\">\r\n            {/* <div className=\"header\">Manage Huddlie Categories</div> */}\r\n            <div className=\"header-no-border\">\r\n              <label className=\"label-with-underline\">Manage Categories</label>\r\n            </div>\r\n\r\n            <button className=\"login-button\" onClick={this.refreshTrees}>\r\n              Refresh\r\n            </button>\r\n            <div className=\"mc-row\">\r\n              <div id=\"retailer-outer-div\" className=\"mc-row-50\">\r\n                <div className=\"header-no-border\">Retailer Categories</div>\r\n                <div className=\"custom-box-controller\">\r\n                  <div\r\n                    className={\r\n                      this.state.showFlipkartNodes\r\n                        ? \"controller selected-controller\"\r\n                        : \"controller\"\r\n                    }\r\n                    onClick={this.switchRetailerView}\r\n                  >\r\n                    Flipkart\r\n                  </div>\r\n                  <div\r\n                    className={\r\n                      this.state.showAmazonNodes\r\n                        ? \"controller selected-controller\"\r\n                        : \"controller\"\r\n                    }\r\n                    onClick={this.switchRetailerView}\r\n                  >\r\n                    Amazon\r\n                  </div>\r\n                </div>\r\n                <div id=\"flipkart-outer-div\">Flipkart Nodes</div>\r\n                <div id=\"amazon-outer-div\">Amazon Nodes</div>\r\n              </div>\r\n              <div id=\"huddlie-outer-div\" className=\"mc-row-50\">\r\n                <div className=\"header-no-border\">Huddlie Categories</div>\r\n                {this.state.nodes !== {} &&\r\n                  this.getRootNodes().map(node => (\r\n                    <div key={node.nodeId}>\r\n                      <label>{node.nodeName}</label>\r\n                      <button onClick={() => this.getChildNodes(node)}>\r\n                        get children\r\n                      </button>\r\n                    </div>\r\n                  ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default graphql(GetNodesAsObj, { name: \"GetNodesAsObj\" })(ManageNodes);\r\n"]},"metadata":{},"sourceType":"module"}